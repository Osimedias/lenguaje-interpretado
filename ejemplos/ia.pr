// red neuronal para aprender a 
// reconocer un digito representado en 7 segmentos

decimales 8
factor_apr = 0.5

e =  2.718281828
epsilon = 0.0000000001

factor = 5
factor2 = 7

PALABRA = ' '
vaciar PALABRA
imprimir 'dim SEGM'
dim SEGM 10
SEGM[0] = '1110111'
SEGM[1] = '1000001'
SEGM[2] = '1101110'
SEGM[3] = '1101011'
SEGM[4] = '1011001'
SEGM[5] = '0111011'
SEGM[6] = '0111111'
SEGM[7] = '1100001'
SEGM[8] = '1111111'
SEGM[9] = '1111011'
imprimir 'dim APRENDER'
dim APRENDER 10
APRENDER[0] = '0000'
APRENDER[1] = '0001'
APRENDER[2] = '0010'
APRENDER[3] = '0011'
APRENDER[4] = '0100'
APRENDER[5] = '0101'
APRENDER[6] = '0110'
APRENDER[7] = '0111'
APRENDER[8] = '1000'
APRENDER[9] = '1001'

cantidad = 7

//capa de entrada
imprimir 'dim entradas 7'
dim entradas  7

//capa de enmedio
imprimir 'dim capa 5'
dim capa       5
imprimir 'dim peso 35'
dim peso      35  // 7 * 5
imprimir 'dim err 5'
dim err        5
imprimir 'dim umbral 5'
dim umbral     5   




imprimir 'dim capa2 5'
dim capa2       5
imprimir 'dim peso2 25'
dim peso2      25  // 5 * 5
imprimir 'dim err2 5'
dim err2        5
imprimir 'dim umbral2 5'
dim umbral2     5   



dim umbral_s   4   
desde i=0 hasta 4
{
    capa[i] = 0
    capa2[i] = 0
    umbral[i] = 0.5
    umbral2[i] = 0.5
}

desde i=0 hasta 34
{
    peso[i] = 0.5
    //imprimir i, ' ', peso [i]
 }

desde i=0 hasta 24
{
    peso2[i] = 0.5
    //imprimir i, ' ', peso [i]
}

// capa de salida
imprimir 'dim salidas 4'
dim salidas   4
imprimir 'dim peso_s 20'
dim peso_s    20 // 5*4
imprimir 'dim umbral_s 5'

desde i = 0 hasta 3
{
	umbral_s[i] = 0.5
}

desde i=0 hasta 19
{
    peso_s[i] = 0.5
}

contador1 = 0

//leer iteraciones

// cuerpo del programa principal
// primera etapa: aprendizaje
acaba = 0
//mientras acaba = 0
//{
cantidad = 7

//imprimir 'que segmento? '
//leer ddd
ddd = 9


//leer iteraciones

llamar realiza_iteraciones


terminar

proc realiza_iteraciones
iteraciones = 20000
segmn=0
contador = 0
mientras contador < iteraciones
{
	errores = 0
	//imprimir contador
	desde segmn = 0 hasta 9
	{
		//imprimir 'seg: ', segmn
			// cargar la capa de entrada con datos
		j = cargar_entradas(segmn)   //ponemos datos en la carpeta de entrada
		//imprimir 'entrada:'
		//llamar ver_entradas
		//imprimir 'aprender: '
		VAR_APR = APRENDER[segmn]
		//imprimir  VAR_APR
		
		//imprimir 'en medio:'
		desde var=0 hasta 4
		{
			z = activacion_capa_enmedio(var)
		}

		desde var=0 hasta 4
		{
			z = activacion_capa_enmedio2(var)
		}
		
		//llamar ver_capa_enmedio
		desde var=0 hasta 3
		{
			z = activacion_capa_salida(var)
		}
		
		//llamar ver_capa_salida
		hay_error = 0
		llamar calcular_error
		/*llamar comprobar_salidas
		si hay_error = 1 entonces
		    errores = errores + 1
			
		si-fin
		*/
		//imprimir '-----------------------------------------------------------------------'
	}	
	/*	si errores = 0 entonces
			salir
		si-fin  */
	
	contador = contador + 1
	contador1 = contador1 +  1
	si contador1 = 100 entonces
		imprimir contador
		contador1 = 0
	si-fin
	//imprimir contador
}
//imprimir 'salida: '
//llamar activacion_capa_salida
//llamar ver_capa_salida
//imprimir VAR_APR
//imprimir 'acaba?'
//leer acaba
//}

llamar pruebas
fin

//error (en la salida)=(salida correcta - salida actual) * salida actual  * (1 - salida actual)
//pesoJK = pesoJK + factor_apr*errorK*Oj
//Oj es la salida con funcion zigmoide.

//error (en las capas interiores) debe ser la sumatoria
// Ej = Oj*(1-Oj)*sumatoria ( Ek * Wjk)




procedimiento pruebas
segm = 0
imprimir 'introduce un numero del 0 al 9'
leer segm
z=cargar_entradas(segm)
desde var=0 hasta 4
		{
			z = activacion_capa_enmedio(var)
		}
		
		desde var=0 hasta 4
		{
			z = activacion_capa_enmedio2(var)
		}
		//llamar ver_capa_enmedio
		desde var=0 hasta 3
		{
			z = activacion_capa_salida(var)
		}
llamar mostrar_capas
fin


 


proc calcular_error
pausa
//  1:   recalculo del umbral en las neuronas en la salida
desde i=0 hasta 3   //desde 0 hasta 3   por cada neurona de salida
			{		
			   digito = 0
			   DIGITO = subcadena(VAR_APR, i + 1 , 1 )
			   convertir DIGITO digito
			   dig_salida = salidas [i]
			   error = (digito - dig_salida) * dig_salida * ( 1 - dig_salida)  //error en la salida (i)
			   umbral_s[i] = umbral_s[i] + (factor_apr * error * dig_salida)   
			 }

// recalculo de los pesos  entre la capa anterior a la salida			   
desde j  = 0 hasta 4   // una por cada peso entre la capa2 del medio y la salida
{ 
			err2[j] = 0          
			desde i=0 hasta 3   //desde 0 hasta 3   por cada neurona de salida
			{		
			   digito = 0
			   DIGITO = subcadena(VAR_APR, i + 1 , 1 )
			   convertir DIGITO digito
			   dig_salida = salidas [i]
				error = (digito - dig_salida) * dig_salida * ( 1 - dig_salida)  //error en la salida (i)
				indice = (i*factor) + j   //comprobar posicion factores
			   //propagacion del error hacia atras
				err2[j] = err2[j]  + (error * peso_s [indice])
 				peso_s [ indice ] = peso_s [ indice ] + factor_apr * (  error *  capa2[j])
			}
 }
 
 

 // 2:   capa2 ( penultima  )
//  si hay_error = 1 entonces
	    //recalculo del error y el umbral en la capa2
		desde j  = 0 hasta 4   
			   { 
				  err2[j]  = capa2 [j] * ( 1 - capa2[j]  ) * err2[j]  
				  umbral2 [j] = umbral2[j] + (factor_apr * err2[j] * capa[j])   
			   }
			   
		desde k = 0 hasta 4       //  5 iteraciones
		{
			   err[j] = 0
			   desde j  = 0 hasta 4   
			   {
			   	  indice = (j*factor) + k
				  err[j] = err[j]  + (err2[j] * peso2 [indice])  //paso el error a la capa anterior
				  peso2 [indice] = peso2 [indice] + ( factor_apr * err2[j] *  capa[k] )   // entrada [k] )
			   }
		}
//si-fin


// 3:   primera capa despues de la entrada
 
// si hay_error = 1 entonces
	   //recalculo del error y del umbral de esta primera capa
	   desde j  = 0 hasta 4   
			   {
				  err[j]  = err[j] * capa [j] * ( 1 - capa[j]  )
				  umbral [j] = umbral[j] + (factor_apr * err[j] * capa[j])  
			   }
		//recalculo de los pesos	   
		desde k = 0 hasta 6       
		{
			   desde j  = 0 hasta 4 
			   {
				  indice = (j*factor2) + k
				  peso [indice] = peso [indice] + ( factor_apr * err[j] *  entrada [k] )
			   }
		}
// si-fin
 
fin






// procedimientos y funciones

funcion activacion_capa_enmedio(indice)
    suma = 0
    desde i=0 hasta 6  //neuronas de entrada
    {
		indice2 = (indice*factor2)+i
		//imprimir '  fila,  columna, indice  = ', indice, '  ', i, '  ', indice2, peso[indice2]
        suma = suma + entradas[i] * peso[indice2]
    }
    suma = suma + umbral[indice]
    //imprimir 'suma = ', suma
    activacion_u = sigmoide(suma)
 
    capa[indice] = activacion_u
    retornar z
fin


funcion activacion_capa_enmedio2(indice)
    suma = 0
    desde i=0 hasta 4  //neuronas de esta capa (2)
    {
		indice2 = (indice*factor)+i
		//imprimir '  fila,  columna, indice  = ', indice, '  ', i, '  ', indice2, peso[indice2]
        suma = suma + capa[i] * peso2[indice2]
    }
    suma = suma + umbral2[indice]
    //imprimir 'suma = ', suma
    activacion_u = sigmoide(suma)
	 
    capa2[indice] = activacion_u
 
    retornar z
fin

  //errj = (neuronJ[j].getActivacion()*(1-neuronJ[j].getActivacion())*suma)
  
funcion activacion_capa_salida(indice)
    suma = 0
    desde i=0 hasta 4
    {
		indice2 = (indice*factor)+i
		//imprimir '  fila,  columna, indice  = ', indice, '  ', i, '  ', indice2, peso[indice2]
        suma = suma + capa2[i] * peso_s[indice2]
    }
    suma = suma + umbral_s[indice]
    //imprimir 'suma = ', suma
    activacion_u = sigmoide(suma)
	 
	
    //no se podra indexar una variable no array,cuidado!
    salidas[indice] = activacion_u
	
	// se pasa el umbral a la siguiente capa?
    retornar z
fin


proc mostrar_capas
 desde i=0 hasta 4
 {
    imprimir 'capa ', i, ': ',  capa[i]
 }
 
desde i=0 hasta 4
 {
    imprimir 'capa2 ', i, ': ',  capa2[i]
 }
 d = 0
 desde i=0 hasta 3
 {
	s = salidas[i]
	n = 3 - i
	si s > 0.49 entonces	
		b = 1
	sino
		b = 0
	si-fin
	
	si b = 1 entonces
		//imprimir b, '   ', d
		d = d + potencia (2, n)
	si-fin
	
	imprimir 'salida ', i, ': ',  s
 }
 imprimir 'decimal: ', d
fin



funcion sigmoide(suma)
    //e =  2.718281828
    exponente = suma * (-1)
    s = 1 / ( 1 + potencia(e, exponente)  )
	//imprimir suma, '     ---- ', s
    retornar s
fin

proc ver_entradas
 desde i=0 hasta 6
 {
    imprimir 'entrada ', i, ': ',  entradas[i]
 }
fin


funcion cargar_entradas(indice)
    PALABRA = SEGM[indice]
    desde segm = 1 hasta 7
    {
        DIGITO  = subcadena (PALABRA, segm, 1)
        digito = 0
        convertir DIGITO digito
        entradas[segm-1] = digito
    }
	 
fin




	
proc mostrar_pesos
imprimir 'primeros pesos'
desde i = 0 hasta 6
{
	desde j = 0 hasta 4
	{
		imprimir i, ' , ', j, '  --  ', peso[(j*factor2)+i]
	}

}

imprimir 'segundos pesos'
desde i = 0 hasta 4
{
	desde j = 0 hasta 4
	{
		imprimir i, ' , ', j, '  --  ', peso2[(j*factor)+i]
	}
}

imprimir 'ultimos pesos'
desde i = 0 hasta 4
{
	desde j = 0 hasta 3
	{
	    indice = (j*factor) + i
		imprimir i, ' , ', j, '  --  ', peso_s[indice], '   ', indice
	}
}

fin




proc comprobar_salidas
hay_error = 0
desde i=0 hasta 3   //desde 0 hasta 3   por cada neurona de salida
			{		
			   digito = 0
			   DIGITO = subcadena(VAR_APR, i + 1 , 1 )
			   convertir DIGITO digito
			   dig_salida = salidas [i]
			   
			  si (dig_salida > 0.5) entonces
					  dig_salida = 1 
			  sino 
					  dig_salida = 0
			  si-fin
				
			  si 	(digito <> dig_salida) entonces
					hay_error = 1
					salir
			  si-fin
			 }
fin
			 
